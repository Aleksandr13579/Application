user www-data;
worker_priority -2;
worker_processes auto;
worker_rlimit_nofile 1024; 	#Изменяет ограничение на максимальное число открытых файлов (RLIMIT_NOFILE) для рабочих процессов. 
				#Используется для увеличения ограничения без перезапуска главного процесса. 
				#Зависит от ОС (посмотерть ulimit -Hn) выставить значение для пользоваетля можно в файле /etc/security/limits.conf. 
				####P.S. из статьи в хабре формула примерно следующая worker_process * worker_connections * 2 = worker_rlimit_nofile (2 дескриптора на подключение)
pid /run/nginx.pid;
error_log /var/log/nginx/error.log;
include /etc/nginx/modules-enabled/*.conf;

events {
 	worker_connections  4096;
	multi_accept        on; #Позволяет принимать максимально возможное количество соединений
	accept_mutex        on; #рабочие процессы будут принимать новые соединения по очереди. В противном случае о новых соединениях будет сообщаться сразу всем рабочим процессам, и при низкой интенсивности поступления новых соединений часть рабочих процессов может работать вхолостую
	accept_mutex_delay  500ms; #Время, в течение которого процесс ждет нове подключение
	use                 epoll; #Эффективный метод обработки соединений для ОС на основе ядра Linux
}


http {

	keepalive_timeout 60s; #Отвечает за максимальное время поддержания keepalive-соединения, в случае, если пользователь по нему ничего не запрашивает
	keepalive_requests 1000;
	reset_timedout_connection  on; #Если клиент перестал читать страницу, Nginx будет сбрасывать соединение с ним
	client_body_timeout 35; #Ждет выставленное количество секунд тело запроса от клиента, после чего сбрасывает соединение
	client_header_timeout 20; #Определяет тайм-аут для чтения заголовка запроса клиента
	send_timeout 30; #Если клиент прекратит чтение ответа, Nginx подождет выставленное количество секунд и сбросит соединение

	sendfile on;
	#aio on; #асинхронного обращения к файлам, избавляемся от очередей запросов
	tcp_nopush on; #позволит передавать заголовок ответа и начало файла в одном пакете
	open_file_cache max=100000 inactive=20s; #Задает настройку для кэширования информации о файлах, с которыми работает nginx
	output_buffers 1 2m;
	open_file_cache_valid 45s; #задает время, через которое веб-сервер будет проверять актуальность данных
	open_file_cache_min_uses 2; #задает минимальное число обращений к файлу, чтобы дескриптор файла оставался открытым в кэше
	open_file_cache_errors on; #кэширование ошибок

	tcp_nodelay on; #маленькие пакеты отправляются без ожидания
	types_hash_max_size 2048;
	
	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# SSL Settings
	##

	#ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
	#ssl_prefer_server_ciphers on;

	##
	# Logging Settings
	##

	access_log /var/log/nginx/access.log combined gzip flush=12h;
	#Таким образом, согласно приведенной выше конфигурации, изначально журналы доступа будут записываться 
	#в буфер и сохраняться на диск только тогда, когда размер буфера достигнет 256 КБ или буферизованные данные станут старше 10 секунд.
	log_format '$remote_addr - $remote_user [$time_local] '
		'"$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$gzip_ratio"';
	##
	# GZIP
	##
	gzip on; #включает сжатие
	gzip_min_length 300; # устанавливает минимальную длину ответов, для которых будет применяться сжатие(по умолчанию 20)
	gzip_vary on; #кэширование сжатого контента
	gzip_comp_level 3; #степень сжатия, чем меньше, тем меньше сжатие и меньше нагрузка на процессор
	gzip_buffers 4 32k;
	gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;

	server {
		
		listen 443 ssl;
        #listen 80;
        root /var/www/html/html;
        ssl_certificate /etc/ssl/tls.crt;
        ssl_certificate_key /etc/ssl/tls.key;
        ssl_session_cache shared:SSL:10m; #размер памяти, выделяемой для хранения кеша
        ssl_session_timeout 1h; #таймаут ssl соединения
        keepalive_timeout 70; #таймаут keepalive соединения
        #ssl_stapling on; #озволяем серверу прикреплять OCSP-ответы, тем самым уменьшая время загрузки страниц у пользователей
        ssl_trusted_certificate /etc/ssl/CAcert.crt;
        #resolver 8.8.8.8; # DNS сервер
		#access_log /var/log/nginx/access.log combined buffer=256k flush=10s;
		error_log  /var/log/nginx/error.log error;
		client_body_buffer_size 32k; #Задает размер буфера для чтения тела запроса клиента
		client_max_body_size 8m; #Устанавливает максимально допустимый размер тела запроса клиента, указанный в поле заголовка запроса "Content-Length". 
					 #Если размер в запросе превышает настроенное значение, клиенту возвращается ошибка 413
		client_body_in_single_buffer on;
		client_header_buffer_size  1m; #Относится к размеру буфера относительно заголовка клиентского запроса
		large_client_header_buffers 4 8k; #Максимальное количество и размер буферов для больших клиентских заголовков. Строка запроса не может превышать размер одного буфера, иначе клиенту будет возвращена ошибка 414

		location / {
			proxy_pass         http://127.0.0.1/;
			proxy_redirect     off;

			proxy_set_header	Host             $host;
			proxy_set_header	X-Real-IP        $remote_addr;
			proxy_set_header	X-Forwarded-For  $proxy_add_x_forwarded_for;

			client_max_body_size       10m;
			client_body_buffer_size    128k;

			#client_body_temp_path      /var/nginx/client_body_temp;

			proxy_connect_timeout      50;	
			proxy_send_timeout         60;
			proxy_read_timeout         60;

			proxy_buffer_size          4k;
			proxy_buffers              4 32k;
			proxy_busy_buffers_size    64k;
			proxy_temp_file_write_size 64k;
			charset utf-8;
    		
		}
	}
	
}
